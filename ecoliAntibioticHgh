import sys
import time
import csv
import random
import numpy as np
import pygame
import pymunk
import pymunk.pygame_util
import os
import os.path
import uuid


argv1 = int(sys.argv[1])
COLLISION = {"green": 1, "red": 2, "yellow": 3}
redMean = {
    0: 5.30,
    125: 4.22,
    250: 4.15,
    500: 3.70
}

greenMean = {
    0: 6.59,
    125: 6.09,
    250: 6.37,
    500: 5.31
}

yellowMean = {
    0: 5.49,
    125: 5.55,
    250: 5.02,
    500: 4.80
}

green_delta_length = []
red_delta_length = []
yellow_delta_length = []
yellow_dic = {}
red_dic = {}
green_dic = {}


class utils:
    def div_able(current_le, dic, mean_le, cell):
        le = current_le/mean_le
        total = 0
        if cell.div_check_able:
            for i in dic.keys():
                if abs(le - i) < 0.01:
                    return random.random() < dic[i]
                elif cell.last_check_le > 3.2:
                    return True
        return False
    def init_color_dic():
        with open("d:/li/iBM/%s/red.csv"%sys.argv[2], "r") as f:
            rows = csv.reader(f)
            n = 0
            for row in rows:
                n += 1
                if len(row) >= 1:
                    red_dic[0.1 * n] = float(row[0])

        with open("d:/li/iBM/%s/green.csv"%sys.argv[2], "r") as f:
            rows = csv.reader(f)
            n = 0
            for row in rows:
                n += 1
                if len(row) >= 1:
                    green_dic[0.1 * n] = float(row[0])

        with open("d:/li/iBM/%s/yellow.csv"%sys.argv[2], "r") as f:
            rows = csv.reader(f)
            n = 0
            for row in rows:
                n += 1
                if len(row) >= 1:
                    yellow_dic[0.1 * n] = float(row[0])

class ecoli:
    def __init__(self, pos, le, r, color, space, grow_rate, radius, id):
        self.exist_body = pymunk.Body()
        self.exist_body.position = pos
        p1 = (le / 2 * np.sin(r), le / 2 * np.cos(r))
        p2 = (-le / 2 * np.sin(r), -le / 2 * np.cos(r))
        self.cell_body = pymunk.Segment(self.exist_body, p1, p2, radius)
        self.id = id
        self.grow_rate = grow_rate
        self.mean_le = greenMean[argv1]*11
        if color == (230, 0, 0, 255):
            self.grow_rate = redGrowRate[argv1]
            self.mean_le = redMean[argv1]*11
        if color == (99, 255, 0, 255):
            self.grow_rate = greenGrowRate[argv1]
            self.mean_le = greenMean[argv1]*11
        if color == (255, 255, 0, 255):
            self.grow_rate = yellowGrowRate[argv1]
            self.mean_le = yellowMean[argv1]*11
        self.pos = pos
        self.space = space
        self.radius = radius
        self.color = color
        if color == (230, 0, 0, 255):
            self.cell_body.collision_type = COLLISION["red"]
        if color == (99, 255, 0, 255):
            self.cell_body.collision_type = COLLISION["green"]
        self.r = r
        self.le = le
        self.cell_body.friction = 1
        self.cell_body.mass = 1
        self.cell_body.color = color
        self.div_check_able = 0
        self.last_check_le = 0

#elasticity and surface velocity
        self.cell_body.elasticity = 1
        self.cell_body.surface_velocity = (10, 10)


        space.add(self.exist_body, self.cell_body)

    def update(self, pos, le, r):
        self.pos = pos
        self.r = r
        self.le = le
        self.exist_body.position = pos
        p1 = (le / 2 * np.sin(r), le / 2 * np.cos(r))
        p2 = (-le / 2 * np.sin(r), -le / 2 * np.cos(r))
        self.cell_body.unsafe_set_endpoints(p1, p2)

    def live(self):
        global UPPER
        if self.color == (230, 0, 0, 255):
            dic = red_dic
        if self.color == (99, 255, 0, 255):
            dic = green_dic
        if self.color == (255, 255, 0, 255):
            dic = yellow_dic
        if utils.div_able(self.le, dic, self.mean_le, self):
            return self.division()
        else:
            if UPPER < sup:
                self.update(self.exist_body.position, self.le + 0.1 * self.grow_rate, self.r)
                scale_le = (self.le + 0.1 * self.grow_rate) / self.mean_le
                if self.div_check_able == 0 and scale_le - self.last_check_le > 0.1:
                    self.div_check_able =1
                    self.last_check_le = scale_le
            return "growing"


    


    def division(self):
        global UPPER
        global eco
        if UPPER < sup:
            le = self.le
            r = self.r
            x = self.pos[0]
            y = self.pos[1]
            p1 = (x + le / 4 * np.sin(r), y + le / 4 * np.cos(r))
            p2 = (x - le / 4 * np.sin(r), y - le / 4 * np.cos(r))
            r_adjustment = random.uniform(-0.05, 0.05)  
            e1 = ecoli(p1, le / 2.5, r + r_adjustment, self.color, self.space, self.grow_rate, self.radius, self.id)
            e2 = ecoli(p2, le / 2.5, r + r_adjustment, self.color, self.space, self.grow_rate, self.radius,
                       len(eco) + 1)

            return [e1, e2]
        else:
            return "stop"


class ebox():
    def __init__(self, space):
        self.body = pymunk.Body(body_type=pymunk.Body.STATIC)
        self.position = (0, 0)
        r = 5
        self.bottom = pymunk.Segment(self.body, (0, 1024), (1024, 1024), r)
        self.top = pymunk.Segment(self.body, (0, 0), (1024, 0), r)
        self.left = pymunk.Segment(self.body, (0, 0), (0, 1024), r)
        self.right = pymunk.Segment(self.body, (1024, 0), (1024, 1024), r)
        space.add(self.body, self.top, self.bottom, self.left, self.right)


def col_process(arbiter, space, data):
    global eco
    
    prob_change_to_yellow = 0.08676  
    prob_retransfer = 0.355333  

    for i in range(len(arbiter.shapes)):
        shape = arbiter.shapes[i]
        
        if shape.collision_type == COLLISION["red"]:
            
            if random.random() > 1 - prob_change_to_yellow:
                shape.color = (255, 255, 0, 255)
                shape.collision_type = COLLISION["yellow"] 
                for e in eco:
                    if e.cell_body == shape:
                        e.color = (255, 255, 0, 255)

        
        elif shape.collision_type == COLLISION["yellow"]:
            other_shape_index = 1 - i
            other_shape = arbiter.shapes[other_shape_index]
            
            if other_shape.collision_type == COLLISION["red"]:
                if random.random() > 1-prob_retransfer:
                    other_shape.color = (255, 255, 0, 255)
                    other_shape.collision_type = COLLISION["yellow"]  
                    for e in eco:
                        if e.cell_body == other_shape:
                            e.color = (255, 255, 0, 255)

    return True


def main(drug_con):
    global UPPER
    global eco
    global circles
    pygame.init()
    screen = pygame.display.set_mode((1024, 1024))
    pygame.display.set_caption("The effect of antibiotics to HGT%s"%sys.argv[1])
    clock = pygame.time.Clock()

    space = pymunk.Space()
    space.gravity = (0, 0)
    space.collision_bias=0.0000001
    
    
    rgh = space.add_collision_handler(COLLISION["red"], COLLISION["green"])
    rgh.begin = col_process

    
    ryh = space.add_collision_handler(COLLISION["red"], COLLISION["yellow"])
    ryh.begin = col_process

    frame = ebox(space)
  
    ecoli_init_pos_green = (np.random.randint(1, 102.4, size=[50, 2]))
    ecoli_init_pos_red = np.random.randint(1, 102.4, size=[50, 2])
    
    for pos in ecoli_init_pos_green:
        pos = tuple(10 * pos)
        eco.append(ecoli(pos, 5, 2 * np.pi * random.random(), (99, 255, 0, 255), space, 0.005, 5, len(eco) + 1))
    for pos in ecoli_init_pos_red:
        pos = tuple(10 * pos)
        eco.append(ecoli(pos, 10, 2 * np.pi * random.random(), (230, 0, 0, 255), space, 0.005, 5, len(eco) + 1))
    
  
    draw_options = pymunk.pygame_util.DrawOptions(screen)
    draw_options.flags = pymunk.SpaceDebugDrawOptions.DRAW_SHAPES

    n = 0
    eco_ids = []
    start_time = time.time()
    time_model = 0          #save the images_1
    while UPPER < sup:
        for e in eco:
            if not e.id in eco_ids:
                eco_ids.append(e.id)
        red_e = 0
        green_e = 0
        yellow_e = 0
        for e in eco:
            if e.color == (230, 0, 0, 255):
                red_e += 1
            if e.color == (99, 255, 0, 255):
                green_e += 1
            if e.color == (255, 255, 0, 255):
                yellow_e += 1
        UPPER = len(eco)
        n += 1
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit(0)
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                sys.exit(0)

        for i in range(len(eco)):
            re1 = eco[i].live()
            if re1 != "growing" and re1 != "stop":
                space.remove(eco[i].exist_body, eco[i].cell_body)
                del eco[i]
                eco += re1
        time_model= time_model+float(0.1)   

        space.step(1 / 50.0)

        screen.fill((0, 0, 0))
        space.debug_draw(draw_options)
        pygame.display.flip()
        
        
       
        clock.tick(50)
   
    

if __name__ == "__main__":
    utils.init_color_dic()
    time_stamp = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime(time.time()))
  
    if not os.path.exists(png_dir):
        os.makedirs(png_dir)
    if not os.path.exists("./results/"):
        os.makedirs("./results/")
    
   
    with open(csv_file_name, "w") as f:
        rates = []
    for i in range(1):
        eco = []
        circles = []
        UPPER = 0
        sup = 2000
               
        rates.append(rate)
     

